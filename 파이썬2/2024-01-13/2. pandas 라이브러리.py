# pandas 라이브러리: 파이썬에서 데이터 분석과 처리를 쉽게 처리할 수 있께 도와준다.
# pandas : Al, 머신러닝(인공지능), 딥러닝, 그래프를 뽑아내기 위해 사용됨

# pandas는 numpy를 기반으로 만들어졌지만 좀 더 복잡한 데이터 분석에 특화
# numpy가 같은 데이터 타입의 배열만 처리할 수 있는데 반해 pandas는 데이터 타입이 다양하게 섞여 있어도 처리가 가능

# 공식 홈페이지 : https://pandas.pydata.org/

# 1. 구조적 데이터 생성하기

# 1) series를 활용한 데이터 생성
import pandas as pd

# pandas에서 데이터를 생성하는 가장 기본적인 방법은 series()를 이용하는 것
# Series()를 이용하면 Series 형식의 구조적 데이터(라벨을 갖는 1차원적 데이터)를 생성할 수 있다.
# 다음은 Series()를 이용해 Series 형식의 데이터를 생성하는 방법
# s = pd.Series(seq_data)
# Series() 인자로는 시퀀스 데이터가 들어간다.
# 시퀀스 데이터 : 리스트와 튜플 타입의 데이터(모두 사용 가능),주로 리스트 데이터를 많이 사용

s1 = pd.Series([10,20,30,40,50])
print(s1)
# 결과:
# 0    10
# 1    20
# 2    30
# 3    40
# 4    50
# dtype: int64

# 자동으로 데이터 라벨(0~4)가 부여되고, 세로 라벨을 index라고 하고, 시퀀스 데이터는 values라고 한다.

# Series 데이터는 index와 value를 분리해서 가져 올 수 있다.

print(s1.index) #결과: RangeIndex(start=0, stop=5, step=1)
print(s1.values) #결과: [10 20 30 40 50]

# numpy의 경우 배열의 모든 원소가 데이터 타입이 같아야 하지만
# pandas의 경우 원소의 데이터 타입이 달라도 가능

s2 = pd.Series(['a','b','c',1,2,3])
print(s2)

# 결과:
# 0    a
# 1    b
# 2    c
# 3    1
# 4    2
# 5    3
# dtype: object

# dtype: object
# 변수 s2는 문자열과 숫자가 혼합이 되어 있어 타입이 object라고 표시

# 데이터가 없는 경우,numpy를 import한 후 np.nan으로 데이터가 없음을 표시 할 수 있다.
import numpy as np

s3 = pd.Series([np.nan, 10, 30])
print(s3)

# 결과:
# 0     NaN
# 1    10.0
# 2    30.0
# dtype: float64

# 데이터를 위한 자리 index는 있지만 실제 값은 없다

# Series 데이터를 생성할 때 다음과 같은 인자로 index 추가 가능
# s = pd.Series(seq.data, index = index_seq)
# 인자로 index를 명시적으로 입력하면 Series 변수(s)의 index는 자동생성되는 index 대신 index_seq가 들어가게 된다.
# index_seq도 리스트와 튜플 타입의 데이터를 모두 사용하지만 주로 리스트를 사용한다.
# 주의할 점은 seq_data의 항목 개수와 index_seq의 항목 개수가 같아야 한다.

# 어느 가게의 날짜별 판매량을 pandas의 Series형식으로 입력할 때, 판매하지 않은 날은 np.nan으로 입력

index_data = ['2024-01-13','2024-01-14','2024-01-15','2024-01-16']
s4 = pd.Series([200,195,np.nan,205],index=index_data)
print(s4)

# 결과
# 2024-01-13    200.0
# 2024-01-14    195.0
# 2024-01-15      NaN
# 2024-01-16    205.0
# dtype: float64

# 파이썬의 딕셔너리를 사용하면 데이터와 index를 함께 입력할 수 있다.
# s = pd.Series(dict_data)
# 입력 인자로 딕셔너리 데이터를 입력하면 딕셔너리 데이터의 key와 value가 Series데이터의 index와 values가 된다.

s5 = pd.Series({'국어':100,'영어':80,'수학':90})
print(s5)

# 결과:
# 국어    100
# 영어     80
# 수학     90
# dtype: int64

# DataFrame은 2차원 형태의 표 형식 데이터 구조로 행과 열로 구성된다.
# 각 열은 데이터의 특성을 나타내며, 각 행은 데이터의 인스턴스를 나타낸다.
# 각 셀은 단일 데이터 값을 가질 수 있다.
# 데이터 과학, 통계 분석, 비지니스 분석에 사용됨

# DataFrame()으로 생성한 데이터의 예
table_data1 = {'A':[1,2,3,4,5],
               'B':[10,20,30,40,50],
               'C':[100,200,300,400,500]}

df1 = pd.DataFrame(table_data1)
print(df1)
# 결과:
#    A   B    C
# 0  1  10  100
# 1  2  20  200
# 2  3  30  300
# 3  4  40  400
# 4  5  50  500

table_data2 = {'A':[6,7,8],
               'B':[60,70,80],
               'C':[600,700,800]}
df2 = pd.DataFrame(table_data2)
print(df2)
# 결과:
#    A   B    C
# 0  6  60  600
# 1  7  70  700
# 2  8  80  800

# 두 개의 DataFrame 데이터 df1과 df2는 길이가 같지 않음
# 길이가 같지 않더라도 연산이 가능
print(df1 + df2)

# 결과
#       A      B       C
# 0   7.0   70.0   700.0
# 1   9.0   90.0   900.0
# 2  11.0  110.0  1100.0
# 3   NaN    NaN     NaN
# 4   NaN    NaN     NaN

# Series와 마찬가지로 DataFrame도 연산할 수 있는 항목끼리만 연산하고, 그렇지 못한 항목은 NaN으로 표시

# pandas에는 데이터의 통계 분석을 위한 메소드(함수:호출)이 있어서 데이터의 총합, 평균, 표준편차 등을 쉽게 구할 수 있다.
# 2012년부터 2016년까지 우리나라의 계절별 강수량 (단위 mm)

table_data3 = {'봄':[256.5,264.3,215.9,223.2,312.8],
               '여름':[770.6,567.5,599.8,381.1,446.2],
               '가을':[363.5,231.2,2+3.1,247.7,381.6],
               '겨울':[139.3,59.9,76.9,109.1,108.1]}

columns_list = ['봄','여름','가을','겨울']
index_list = ['2012','2013','2014','2015','2016']

df3 = pd.DataFrame(table_data3,columns=columns_list,index=index_list)
print(df3)
# 결과:
#           봄     여름     가을     겨울
# 2012  256.5  770.6  363.5  139.3
# 2013  264.3  567.5  231.2   59.9
# 2014  215.9  599.8    5.1   76.9
# 2015  223.2  381.1  247.7  109.1
# 2016  312.8  446.2  381.6  108.1

# pandas에서 제공하는 통계 메소드
# 합: sum()
# 평균: mean()
# 표준 편차: std()
# 분산: var()
# 최솟값: min()
# 최댓값: max()
# 누적 합: cumsum()
# 누적 곱: cumprod()

print(df3.mean()) #계절별로의 평균

print(df3.std())

# 연도별로 평균 강수량과 표준 편차를 구할 경우엔 연산의 방향 설정을 위해 axis 인자를 추가해야 함
# axis=0 :열별로 연산 수행,axis=1 : 행별로 연산을 수행

print(df3.mean(axis=1)) #가로방향의 평균

# 결과:
# 2012    382.475
# 2013    280.725
# 2014    224.425
# 2015    240.275
# 2016    312.175
# dtype: float64

# describe()를 이용하면 평균, 표준편차, 최솟값, 최댓값 등을 한번에 구할 수 있다.
# 25%,50%,75% : 백분위 수의 각 지점으로, 분포를 반영해 평균을 보완하는 목적으로도 사용 가능
print(df3.describe())

# 결과:
#                 봄         여름          가을          겨울
# count    5.000000    5.00000    5.000000    5.000000
# mean   254.540000  553.04000  245.820000   98.660000
# std     38.628267  150.58726  150.373026   30.925523
# min    215.900000  381.10000    5.100000   59.900000
# 25%    223.200000  446.20000  231.200000   76.900000
# 50%    256.500000  567.50000  247.700000  108.100000
# 75%    264.300000  599.80000  363.500000  109.100000
# max    312.800000  770.60000  381.600000  139.300000


import pandas as pd

data = {'Name':['John','Mike','Sarah','Kate'],
        'Age':[32,28,45,36],
        'City':['Seoul','New York','Paris','London']}

# 판다스를 사용해 데이터 프레임에서 Age열의 평균을 구하시오.
df4 = pd.DataFrame(data)
print(df4)
# 결과:
#     Name  Age      City
# 0   John   32     Seoul
# 1   Mike   28  New York
# 2  Sarah   45     Paris
# 3   Kate   36    London

print(df4['Age'].mean())
# 결과: 35.25